{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-watcher.js"],"names":["_","require","chokidar","store","boundActionCreators","queryCompiler","default","queryRunner","invariant","normalize","exports","extractQueries","state","getState","pagesAndLayouts","pages","layouts","components","uniq","map","p","component","then","forEach","query","queries","get","replaceComponentQuery","text","componentPath","process","env","NODE_ENV","watch","watcher","add","runQueriesForComponent","getPagesForComponent","deleteComponentsDependencies","path","id","all","filter","watchComponent","debounceCompile","debounce","rootDir","on"],"mappings":"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","file":"query-watcher.js","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\n\nconst { store } = require(`../../redux/`)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst queryRunner = require(`./query-runner`)\nconst invariant = require(`invariant`)\nconst normalize = require(`normalize-path`)\n\nexports.extractQueries = () => {\n  const state = store.getState()\n  const pagesAndLayouts = [...state.pages, ...state.layouts]\n  const components = _.uniq(pagesAndLayouts.map(p => p.component))\n  queryCompiler().then(queries => {\n    components.forEach(component => {\n      const query = queries.get(normalize(component))\n      boundActionCreators.replaceComponentQuery({\n        query: query && query.text,\n        componentPath: component,\n      })\n    })\n\n    return\n  })\n\n  // During development start watching files to recompile & run\n  // queries on the fly.\n  if (process.env.NODE_ENV !== `production`) {\n    watch()\n\n    // Ensure every component is being watched.\n    components.forEach(component => {\n      watcher.add(component)\n    })\n  }\n}\n\nconst runQueriesForComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page & layout data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  const component = store.getState().components[componentPath]\n  return Promise.all(pages.map(p => queryRunner(p, component)))\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages, ...state.layouts].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nlet watcher\nexports.watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (watcher) {\n    watcher.add(componentPath)\n  }\n}\nconst watch = rootDir => {\n  if (watcher) return\n  const debounceCompile = _.debounce(() => {\n    queryCompiler().then(queries => {\n      const components = store.getState().components\n      queries.forEach(({ text }, id) => {\n        invariant(\n          components[id],\n          `${id} not found in the store components: ${JSON.stringify(\n            components\n          )}`\n        )\n\n        if (text !== components[id].query) {\n          boundActionCreators.replaceComponentQuery({\n            query: text,\n            componentPath: id,\n          })\n          runQueriesForComponent(id)\n        }\n      })\n    })\n  }, 100)\n\n  watcher = chokidar\n    .watch(`${rootDir}/src/**/*.{js,jsx,ts,tsx}`)\n    .on(`change`, path => {\n      debounceCompile()\n    })\n}\n"]}