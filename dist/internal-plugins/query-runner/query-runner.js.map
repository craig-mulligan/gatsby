{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","Promise","writeFileAsync","promisify","writeFile","boundActionCreators","joinPath","store","module","exports","pageOrLayout","component","getState","schema","program","graphql","query","context","result","errors","console","log","componentPath","_name","process","exit","contextKey","path","resultJSON","directory","jsonName"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA,IAAMA,KAAKC,aAAX;AACA,IAAMC,UAAUD,mBAAhB;;AAEA,IAAME,iBAAiBD,QAAQE,SAAR,CAAkBJ,GAAGK,SAArB,CAAvB;;eACgCJ,8B;IAAxBK,mB,YAAAA,mB;;gBACaL,2B;IAAbM,Q,aAAAA,Q;;gBAEUN,sB;IAAVO,K,aAAAA,K;;AAER;;;AACAC,OAAOC,OAAP;AAAA,wEAAiB,iBAAOC,YAAP,EAAqBC,SAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BACaJ,MAAMK,QAAN,EADb,EACPC,MADO,mBACPA,MADO,EACCC,OADD,mBACCA,OADD;;AAGTC,mBAHS,GAGC,SAAVA,OAAU,CAACC,KAAD,EAAQC,OAAR;AAAA,qBACd,sBAAgBJ,MAAhB,EAAwBG,KAAxB,EAA+BC,OAA/B,EAAwCA,OAAxC,EAAiDA,OAAjD,CADc;AAAA,aAHD;;AAMf;;;AACIC,kBAPW;;AASf;;AATe,kBAUX,CAACP,UAAUK,KAAX,IAAoBL,UAAUK,KAAV,OAVT;AAAA;AAAA;AAAA;;AAWbE,qBAAS,EAAT;AAXa;AAAA;;AAAA;AAAA;AAAA,mBAaEH,QAAQJ,UAAUK,KAAlB,6BACVN,YADU,EAEVA,aAAaO,OAFH,EAbF;;AAAA;AAabC,kBAba;;AAAA;;AAmBf;AACA;AACA,gBAAIA,UAAUA,OAAOC,MAArB,EAA6B;AAC3BC,sBAAQC,GAAR;AACAD,sBAAQC,GAAR,6BAAsCV,UAAUW,aAAhD;AACAF,sBAAQC,GAAR;AACAD,sBAAQC,GAAR;AACAD,sBAAQC,GAAR,CAAYV,UAAUK,KAAtB;AACAI,sBAAQC,GAAR;AACAD,sBAAQC,GAAR;AACAD,sBAAQC,GAAR,CAAYH,OAAOC,MAAnB;AACA;AACA,kBAAIL,QAAQS,KAAR,YAAJ,EAA+B;AAC7BC,wBAAQC,IAAR,CAAa,CAAb;AACD;AACF;;AAED;AACIC,sBArCW;;AAsCf,gBAAI,CAAChB,aAAaiB,IAAlB,EAAwB;AACtBD;AACD;AACDR,mBAAOQ,UAAP,IAAqBhB,aAAaO,OAAlC;AACMW,sBA1CS,GA0CI,yBAAeV,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CA1CJ;AAAA,6CA2CRhB,eACLI,SAASQ,QAAQe,SAAjB,oBAA8CnB,aAAaoB,QAA3D,CADK,EAELF,UAFK,CA3CQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"query-runner.js","sourcesContent":["import { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs`)\nconst Promise = require(`bluebird`)\n\nconst writeFileAsync = Promise.promisify(fs.writeFile)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst { joinPath } = require(`../../utils/path`)\n\nconst { store } = require(`../../redux`)\n\n// Run query for a page\nmodule.exports = async (pageOrLayout, component) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n\n  // Nothing to do if the query doesn't exist.\n  if (!component.query || component.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(component.query, {\n      ...pageOrLayout,\n      ...pageOrLayout.context,\n    })\n  }\n\n  // If there's a graphql errort then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    console.log(``)\n    console.log(`The GraphQL query from ${component.componentPath} failed`)\n    console.log(``)\n    console.log(`Query:`)\n    console.log(component.query)\n    console.log(``)\n    console.log(`GraphQL Error:`)\n    console.log(result.errors)\n    // Perhaps this isn't the best way to see if we're building?\n    if (program._name === `build`) {\n      process.exit(1)\n    }\n  }\n\n  // Add the path/layout context onto the results.\n  let contextKey = `pathContext`\n  if (!pageOrLayout.path) {\n    contextKey = `layoutContext`\n  }\n  result[contextKey] = pageOrLayout.context\n  const resultJSON = JSON.stringify(result, null, 4)\n  return writeFileAsync(\n    joinPath(program.directory, `.cache`, `json`, pageOrLayout.jsonName),\n    resultJSON\n  )\n}\n"]}